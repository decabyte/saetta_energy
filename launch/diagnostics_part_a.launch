<launch>
    <!-- see thruster_diagnostics.launch for launch examples -->

    <!-- make sure of starting with a clean state -->
    <rosparam command="delete" param="/pilot"/>

    <!-- default args -->
    <arg name="verbose" default="" />
    <arg name="simulation" default="false" />
    <arg name="topic_output" default="thrusters/request" />

    <!-- script config logic -->
    <arg name="fault_control" default="false"/>
    <arg name="fault_speeds" default="false"/>

    <!-- <param name="pilot/adaptive_yaw" value="false"/> -->
    <param name="pilot/fault_control" value="$(arg fault_control)"/>
    <param name="pilot/fault_speeds" value="$(arg fault_speeds)"/>

    <!-- start the vehicle pilot -->
    <group if="$(arg simulation)">
        <include file="$(find vehicle_core)/launch/pilot_sim.launch">
            <arg name="verbose" default="$(arg verbose)" />
            <arg name="topic_output" default="$(arg topic_output)" />
        </include>
    </group>

    <group unless="$(arg simulation)">
        <include file="$(find vehicle_core)/launch/pilot_real.launch">
            <arg name="verbose" default="$(arg verbose)" />
            <arg name="topic_output" default="$(arg topic_output)" />
        </include>
    </group>

    <!-- start the thruster wrapper -->
    <node name="thruster_wrapper" pkg="vehicle_core" type="node_thruster_wrapper.py" output="screen">
        <!-- set topics input and outputs -->
        <param name="req_input" value="thrusters/request"/>
        <param name="req_output" value="thrusters/commands"/>

        <param name="feed_input" value="thrusters/status"/>
        <param name="feed_output" value="thrusters/feedback"/>
    </node>

</launch>
